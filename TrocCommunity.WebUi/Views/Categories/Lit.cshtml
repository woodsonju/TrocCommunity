@model TrocCommunity.Core.Tools.CategorieLivre

@{
    ViewBag.Title = "Catalogue";
}

<div class="product-search">

    <form action="@Url.Action("Catalogue", "Categories")" method="get">
        <input id="search" name="search" type="text" value="@ViewBag.Search" />
        <input type="submit" value="Search" />
    </form>

</div>
@helper buildLinks(int start, int end, string innerContent)
{
    for (int i = start; i <= end; i++)
    {
        <a class="@(i == ViewBag.CurrentPage ? "current" : "")"
           href="@Url.Action("Catalogue", "Categories", new { page = i, sortBy = ViewBag.sortBy, isAsc = ViewBag.isAsc, search = ViewBag.Search })">@(innerContent ?? i.ToString())</a>
    }

}

@helper pageLinks()
{
    const int maxPages = 11;

    if (ViewBag.TotalPages <= maxPages)
    {
        @buildLinks(1, (int)ViewBag.TotalPages, null)
        return;
    }

    int pagesAfter = ViewBag.TotalPages - ViewBag.CurrentPage; // Number of pages after current
    int pagesBefore = ViewBag.CurrentPage - 1; // Number of pages before current

    if (pagesAfter <= 4)
    {
        @buildLinks(1, 1, null) // Show 1st page

        int pageSubset = ViewBag.TotalPages - maxPages - 1 > 1 ? ViewBag.TotalPages - maxPages - 1 : 2;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

        @buildLinks(ViewBag.TotalPages - maxPages + 3, ViewBag.TotalPages, null) // Show last pages

        return; // Exit
    }

    if (pagesBefore <= 4)
    {
        @buildLinks(1, maxPages - 2, null) // Show 1st pages


        int pageSubset = maxPages + 2 < ViewBag.TotalPages ? maxPages + 2 : ViewBag.TotalPages - 1;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

        @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page

        return; // Exit

    }

    if (pagesAfter > 4)
    {
        @buildLinks(1, 1, null) // Show 1st pages

        int pageSubset1 = ViewBag.CurrentPage - 7 > 1 ? ViewBag.CurrentPage - 7 : 2;
        int pageSubset2 = ViewBag.CurrentPage + 7 < ViewBag.TotalPages ? ViewBag.CurrentPage + 7 : ViewBag.TotalPages - 1;

        @buildLinks(pageSubset1, pageSubset1, pageSubset1 == ViewBag.CurrentPage - 4 ? null : "...") // Show 1st page subset (...)

        @buildLinks(ViewBag.CurrentPage - 3, ViewBag.CurrentPage + 3, null) // Show middle pages

        // Show 2nd page subset (...)
        // only show ... if page is contigous to the previous one.
        @buildLinks(pageSubset2, pageSubset2, pageSubset2 == ViewBag.CurrentPage + 4 ? null : "...")
        @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null)// Show last page

        return; // Exit

    }
}



<div class="container-fluid" id="container-categorie-livre">
    <div class="row" id="categorie-livre-row">

        <div class="col-md-4" style="padding : 0!important">

            <div class="bs-example">
                <div class="accordion" id="accordionExample">

                    <div class="card">
                        @foreach (var item in Model.Categories)
                        {
                            <div class="card-header" id="@item.Description.Substring(0,3)">
                                <h2 class="mb-0 category-btn">
                                    <button type="button" class="btn btn-link ">
                                        @Html.ActionLink(item.NomCategorie, item.NomCategorie.Substring(0, 3), null, null)
                                    </button>
                                    <i class="fas fa-sort-down  collapsed ml-lg-2" data-toggle="collapse" data-target="#@item.NomCategorie.Substring(0,3)"></i>
                                </h2>
                            </div>
                            <div id="@item.NomCategorie.Substring(0,3)" class="collapse " aria-labelledby="@item.Description.Substring(0,3)" data-parent="#accordionExample">
                                <div class="card-body">
                                    <p>@Html.DisplayFor(modelItem => item.Description)</p>
                                </div>
                            </div>
                        }
                    </div>

                </div>
            </div>
        </div>





        <div class="col-md-8">





            <div class="row">
                @foreach (var item in Model.Livres)
                {

                    <div class="col-md-4 col-sm-12 section-book-card">
                        <div class="section-picture-book-image thumbnail">
                            <img src="~/Content/TEMPLATE/images/Livres/@item.Image" alt="Découverte" class="img-fluid" />
                        </div>
                        <div>
                            <h3 class="text-center titre-books-thumbnail">Titre</h3>
                            <p class="text-center">@Html.DisplayFor(modelItem => item.Author)</p>
                            <div class="books-items">
                                <p class="books-points text-center">100 points</p>
                            </div>
                            <p class="text-left">Ville</p>
                        </div>
                    </div>

                }
            </div>


        </div>


    </div>
    <div class="row" id="row-pagination">
        <div class="pagination">
            @pageLinks()
        </div>
    </div>
</div>


